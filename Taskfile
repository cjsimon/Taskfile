#!/bin/bash

#########
# Setup #
#########
    
    #############
    # Functions #
    #############
        
        #############################
        # Taskfile Helper Functions #
        #############################
            
            function taskfile-main {
                local args=("$@")
                
                # The 'run' argument is optional;
                # "Shift it out" if it is supplied
                # 
                # This behavior can be toggled by setting
                # one of the following global envvar flags:
                # 
                # TASKFILE_DONT_IGNORE_RUN_ARG, TASKFILE_DONT_OMIT_RUN_ARG
                # or
                # TASKFILE_IGNORE_RUN_ARG, TASKFILE_OMIT_RUN_ARG
                # 
                # Note: Don't supply multiple conflicting flags.
                #       Doing so will engage the default behavior of ignoring the run arg.
                #       
                #       TODO: Fix default behavior not engaging on conflicting flags
                # 
                if [[ "${args[0]}" = 'run' ]]; then
                    if [[ (-n "$TASKFILE_IGNORE_RUN_ARG"      && -n "$TASKFILE_OMIT_RUN_ARG")
                    ||    (-z "$TASKFILE_DONT_IGNORE_RUN_ARG" && -z "$TASKFILE_DONT_OMIT_RUN_ARG")]]; then
                        args=("${args[@]:1}")
                    fi
                fi
                
                # Run the help output for '--help'/'-h'
                if [[ "${args[0]}" = '--help' || "${args[0]}" = '-h' ]]; then
                    # "Shift out" the '--help'/'-h' arg
                    args=("${args[@]:1}")
                    
                    taskfile-help "${args[@]}"
                    return "$?"
                fi
                
                # Otherwise, run the passed task
                taskfile-run "${args[@]}"
                return "$?"
            }
            
            function taskfile-help {
                local args=("$@")
                local filename=$(basename -- "$0")
                
                if [[ -n "${args[@]}" ]]; then
                    echo "Warning! Ignoring extraneous arguments: ${args[@]}"
                    echo
                fi
                
                # Display command usage syntax
                echo "Usage: $filename [run] <task|alias> [args]"
                
                # Display tasks
                taskfile-display-tasks
            }
            
            function taskfile-display-tasks {
                echo
                
                # Display available tasks
                echo "Tasks:"
                printf '  - %s\n' "${task_functions[@]}"
                echo
                
                # Display available aliases
                echo "Aliases:"
                local alias
                local aliases
                for a in "${task_aliases[@]}"; do
                    alias=$(alias "$a")
                    
                    # Strip 'alias ' prefix
                    alias=${alias/'alias '/''}
                    # Strip = and replace with colon and tab seperator
                    alias=${alias/'='/":\t"}
                    # Strip all quotes
                    alias=${alias//\'/''}
                    
                    tabs 8 # TODO: Better stripping of alias and corresponding command so you can use printf for formatting
                    echo -e "  - $alias"
                done
                echo
            }
            
            function taskfile-run {
                local args=("$@")
                
                # Get the first arg as the given task to run, and "shift it out" of the args list
                local task="${args[0]}"
                if [[ -z "$task" ]]; then
                    # No task specified. Attempt to load the default task if it is defined
                    if [[ -n "$TASKFILE_DEFAULT_TASK" ]]; then
                        task="$TASKFILE_DEFAULT_TASK"
                    else
                        # No default task defined. Run the command usage help
                        taskfile-help "${args[@]}"
                        return "$?"
                    fi
                fi
                args=("${args[@]:1}")
                
                #  Validate the task
                if [[ ! " ${runnable_task_functions_and_aliases[*]} " =~ [[:space:]]${task}[[:space:]] ]]; then
                    error "Error! Invalid task function or alias: $task"
                    taskfile-display-tasks
                    
                    return 1
                fi
                
                # Run the task
                    
                    # If the task is an alias, resolve its aliased function to run
                    if [[ " ${task_aliases[*]} " =~ [[:space:]]${task}[[:space:]] ]]; then
                        echo -n "Resolving alias: $task=" # Debug
                        task=$(command-to-alias "$task") # TODO: Fix
                        echo "$task" # Debug
                    fi
                    
                    # Don't time the user-defined, nor builtin 'help' tasks, unlike other tasks
                    #
                    # TODO: Builtin taskfile-help function name could possibly change after
                    #       implementing sourcing user tasks from a seperate file
                    #
                    if [[ "$task" = 'help' || "$task" = 'taskfile-help' ]]; then
                        "$task" "${args[@]}"
                        return "$?"
                    fi
                    
                    TIMEFORMAT="Task completed in %3lR"
                    time "$task" "${args[@]}"
                    return "$?"
            }
            
            # TODO: Fix. Maybe this isn't working because its being run
            #       from a script rather than straight from the commandline?
            #
            # https://stackoverflow.com/a/40646465
            function command-to-alias() {
                local alias_key
                local expansion
                local guess
                
                local command="$1" # The command to compact using aliases
                local search_again="x"
                local shortest_guess="$command"
                
                while [[ "${search_again:-}" ]]; do
                    unset search_again
                    for alias_key in "${!BASH_ALIASES[@]}"; do
                        expansion="${BASH_ALIASES[$alias_key]}"
                        guess="${command/#"$expansion"/$alias_key}"
                        test "${#guess}" -lt "${#shortest_guess}" || continue
                        shortest_guess="$guess"
                        search_again="x"
                    done
                    command="$shortest_guess"
                done
                
                echo "$command"
            }
            
        ####################
        # Helper Functions #
        ####################
            
            # The global list of containers defined in the compose stack
            #
            # TODO: Parse container-compose.yml and read in valid service
            #       containers from there instead of hardcoding them here
            #
            containers=('api' 'app' 'database')
            
            function validateContainer {
                local args=("$@")
                
                local targetContainer="${args[0]}"
                
                # Validate the targetContainer name
                if [[ " ${containers[*]} " =~ [[:space:]]${targetContainer}[[:space:]] ]]; then
                    return 0
                else
                    return 1
                fi
            }
            
            function debug {
                local args=("$@")
                
                echo -e "${args[@]}"
            }
            
            function error {
                local args=("$@")
                
                local message="${args[0]}"
                args=("${args[@]:1}")
                
                echo "$message" >&2
            }
            
            function editor {
                local args=("$@")
                
                if command -v "$EDITOR" &> /dev/null; then
                    $EDITOR "${args[0]}"
                else
                    error 'Invalid editor! Set the EDITOR environment variable'
                fi
            }
        
        # List of all defined functions up until now.
        # Only the helper functions have been defined
        helper_functions=$(compgen -A function)
        
    ########
    # PATH #
    ########
        
        # NodeJS Module Binaries
        PATH=./node_modules/.bin:$PATH

#########
# Tasks #
#########
    
    # TODO: `source` working directory [Tt]askfile, and prefix all tasks in that file with 'task-' to differentiate from helper functions.
    #       Seperate these Task functions from this driver file; make this file its own executable called task, which runs a user 'Taskfile'
    #       
    #       Note: The taskfile should have task functions prefixed with 'task-' so that it can also have non-task functions, such as helper functions.
    #
    
    ########
    # help #
    ########
    #
    # TODO: Maybe you should make an option or flag for running
    #       the builtin Taskfile command usage help as opposed to
    #       a user-defined "help" task for their Taskfile?
    #       There could likely exists a project-level user-defined
    #       help task in their Taskfile besides the builtin one.
    #       At the moment, I'm hardcoding the builtin command usage
    #       help and do not have a project-level Taskfile help
    #
        
        function help {
            local args=("$@")
            
            taskfile-help "${args[@]}"
            return "$?"
        }
    
    #########
    # build #
    #########
        
        function build {
            local args=("$@")
            local targetContainer="${args[0]}" # TODO: Support multiple containers
            
            # Check if a targetContainer is supplied;
            # otherwise, all containers will be built
            if [[ -n "$targetContainer" ]] then
                
                validateContainer "$targetContainer"
                # Check if a validation error occurred
                if [[ "$?" -ne 0 ]]; then
                    error "Error! Invalid container: $targetContainer"
                    error "Valid containers: ${containers[*]}"
                    
                    return "$?"
                fi
                # "Shift out" the targetContainer arg from the list of args
                args=("${args[@]:1}")
                
                podman-compose build "$targetContainer" "${args[@]}"
                return "$?"
                
            else
                
                # Build all containers
                podman-compose build "${args[@]}"
                return "$?"
                
            fi
        }
        alias install='build'
    
    #########
    # start #
    #########
        
        # Either `compose start`s a set of existing containers given their stack service names as args,
        # or `compose up`s the entire stack. Use -- to seperate between list of containers and command args.
        #
        # Note: If `compose up` is determined for use, all args will be passed to that command instaed
        #
        # Note: `compose start` only starts existing stopped containers,
        #       while `compose up` creates them from the stack
        #
        function start {
            local args=("$@")
            
            # Short circut no args to compose-up
            if [[ -z "${args[@]}" ]]; then
                podman-compose up "${args[@]}"
                return "$?"
            fi
            
            # Seperate passed container args from passed command args, whether applicable or not.
            #
            # For this function, only the compose-start command requires such a distinction,
            # but the function determines whether to compose-start or compose-up depending on
            # the targetContainers supplied anyways.
            #
            # While doing all the work upfront maybe wasteful, it's more readable at the moment
            
            local separatorHasBeenFound=false
            
            local argsList1=() # targetContainer args
            local argsList2=() # args for the command
            
            for currentArg in "${args[@]}"; do
                [[ "$currentArg" == '--' ]]
                local argIsSeperator="$?"
                
                if [[ "$separatorHasBeenFound" = false && "$argIsSeperator" -eq 0 ]]; then
                    separatorHasBeenFound=true
                elif [[ "$separatorHasBeenFound" = false ]]; then
                    # No seperator yet; arg belongs in the first bucket
                    argsList1+=("$currentArg")
                else
                    # Seperator found; arg belongs in the second bucket
                    argsList2+=("$currentArg")
                fi
            done
            
            # In an attempt to compose-start, look for at least one valid container from the targetContainers
            # otherwise, the container stack will be upped, and both argsLists will be passed to that command
            
            # Assume the first set of args are targetContainers
            local targetContainers=("${argsList1[@]}")
            local validTargetContainers=()
            
            for targetContainer in "${targetContainers[@]}"; do
                
                validateContainer "$targetContainer"
                # If validation was successful, add the container to the set of validTargetContainers for processing;
                if [[ "$?" -eq 0 ]]; then
                    validTargetContainers+=("$targetContainer")
                else # otherwise, indicate its invalidity and omit it from the list of validTargetContainers
                    error "Invalid container: $targetContainer"
                fi
            done
            
            if (( ${#validTargetContainers[@]} != 0 )); then
                
                # Valid targetContainers found;
                # gather args and compose-start
                local commandArgs="${argsList2[@]}"
                podman-compose start "${validTargetContainers[@]}" "${commandArgs[@]}"
                return "$?"
                
            else
                
                # No valid targetContainers to start supplied;
                # compose-up instead, using all supplied args
                argsList1+=("${argsList2[@]}")
                podman-compose up "${argsList1[@]}"
                return "$?"
                
            fi
        }
        alias up='start'
        alias default='start'
        alias run='default' # TODO: Make a TASKFILE_RUN_RUNS_DEFAULT=1 flag that automatically runs the
                            #       "default" task if no args are supplied to run. That way, we optionally
                            #       don't have to include this line under the default alias, and could even
                            #       potentially omit the "default" alias altogether; although personally,
                            #       I'd still prefer to use that explicitly defined "default" task myself
                            #       
                            #       This would be opposed to showing the help when no args are supplied,
                            #       so maybe the flag should be renamed: TASKFILE_DEFAULT_TASK='default'
                            #       
                            #       Maybe to preserve existing functionality of showing help on no args supplied,
                            #       have the default effectively be set to to TASKFILE_DEFAULT_TASK='taskfile-help'
                            #       
                            #       TODO: Think about which of these flags and behaviors should be default. npm allows
                            #             for omitting "run" by default, should I also do that, or stick to most verbose
                            #             options by default, and more loose and lax options by opt in? Likely most verbose;
                            #             it could be better to be verbose by default to encourage readability and consistency,
                            #             and just leave it to users to set their own lax preferences for their own use cases,
                            #             as I, too, will be doing personally with a user alias, 'run', set to run Taskfiles.
                            #             Laxness defaults seem to imply special rules and cases that need to be accounted for
        
    ########
    # stop #
    ########
        
        function stop {
            local args=("$@")
            local targetContainer="${args[0]}" # TODO: Support multiple containers
            
            # Check if a targetContainer is supplied;
            # otherwise, all containers will be downed
            if [[ -n "$targetContainer" ]] then
                
                validateContainer "$targetContainer"
                # Check if a validation error occurred
                if [[ "$?" -ne 0 ]]; then
                    error "Error! Invalid container: $targetContainer"
                    error "Valid containers: ${containers[*]}"
                    
                    return "$?"
                fi
                # "Shift out" the targetContainer arg from the list of args
                args=("${args[@]:1}")
                
                podman-compose stop "$targetContainer" "${args[@]}"
                return "$?"
                
            else
                
                # Stop the stack
                podman-compose stop "${args[@]}"
                return "$?"
                
            fi
        }
    
    ########
    # down #
    ########
    #
    # Note: The -t option in the compose-down command can
    #       be used to forcibly SIGKILL the containers in
    #       specified number of seconds after the initial
    #       SIGTERM command is issued
    #
        
        function down {
            local args=("$@")
            
            # Short circut no args to compose-down
            if [[ -z "${args[@]}" ]]; then
                podman-compose down "${args[@]}"
                return "$?"
            fi
            
            local separatorHasBeenFound=false
            
            local argsList1=() # targetContainer args
            local argsList2=() # args for the command
            
            for currentArg in "${args[@]}"; do
                [[ "$currentArg" == '--' ]]
                local argIsSeperator="$?"
                
                if [[ "$separatorHasBeenFound" = false && "$argIsSeperator" -eq 0 ]]; then
                    separatorHasBeenFound=true
                elif [[ "$separatorHasBeenFound" = false ]]; then
                    # No seperator yet; arg belongs in the first bucket
                    argsList1+=("$currentArg")
                else
                    # Seperator found; arg belongs in the second bucket
                    argsList2+=("$currentArg")
                fi
            done
            
            # Assume the first set of args are targetContainers
            local targetContainers=("${argsList1[@]}")
            local validTargetContainers=()
            
            for targetContainer in "${targetContainers[@]}"; do
                
                validateContainer "$targetContainer"
                # If validation was successful, add the container to the set of validTargetContainers for processing;
                if [[ "$?" -eq 0 ]]; then
                    validTargetContainers+=("$targetContainer")
                else # otherwise, indicate its invalidity and omit it from the list of validTargetContainers
                    error "Invalid container: $targetContainer"
                fi
            done
            
            if (( ${#validTargetContainers[@]} != 0 )); then
                local commandArgs="${argsList2[@]}"
                podman-compose down "${validTargetContainers[@]}" "${commandArgs[@]}"
                return "$?"
                
            else
                
                argsList1+=("${argsList2[@]}")
                podman-compose down "${argsList1[@]}"
                return "$?"
                
            fi
        }
        alias clean='down'
    
    ############
    # down pod #
    ############
        
        function down-pod {
            podman pod rm --force --ignore --time 0 "pod_${COMPOSE_PROJECT_NAME:-'moviemanager'}"
        }
    
    ##########
    # attach #
    ##########
        
        function attach {
            local args=("$@")
            local targetContainer="${args[0]}"
            
            validateContainer "$targetContainer"
            # Check if a validation error occurred
            if [[ "$?" -ne 0 ]]; then
                error "Error! Invalid container: $targetContainer"
                error "Valid containers: ${containers[*]}"
                
                return "$?"
            fi
            # "Shift out" the targetContainer arg from the list of args
            args=("${args[@]:1}")
            
            # Attach into the targetContainer
            podman exec -it "$targetContainer" /bin/bash
            return "$?"
        }
    
    ###########
    # restart #
    ###########
        
        function restart {
            # TODO: Use alias 'up' for start task when aliases are working
            #
            # Note: We're using the pod rm command instead of downing the
            #       stack with compose-down for the time being due to a bug:
            #       https://github.com/containers/podman-compose/issues/921
            #
            stop
            down -- -t 1 && down-pod
            start
            return "$?"
        }
    
    ###########
    # rebuild #
    ###########
        
        function rebuild {
            local args=("$@")
            
            if [[ -z "${args[@]}" ]]; then
                podman-compose build --no-cache
            fi
            
            build "${args[@]}" --no-cache
            return "$?"
        }
    
    ########
    # lock #
    ########
    #
    # Locks service-level app dependencies
    #
    # TODO: This task should exist seperately in Taskfiles
    #       that live in each of the service-level directories.
    #       This parent Taskfile would then proxy tasks issued
    #       here to the service being targeted, if applicable.
    #       The same could be done for the container management tasks
    #       
    #       Locking could also occur within the container
    #       instead of the host like this, if the host
    #       src/ code volume is active, so that the user
    #       doesn't necessarily need to install PipEnv
    #       on their host
    #
    # TODO: Two sets of args, first set specifying the target services,
    #       else all services if none specified, and the second set being
    #       the set of args to pass to the pipenv lock command. Seperate
    #       sets of args with --. See the other container tasks doing this
    #
        
        function lock {
            local args=("$@")
            
            local services=('app' 'api')
            
            for service in "${services[@]}"; do
                pushd . >> /dev/null
                    trap 'popd > /dev/null' SIGINT SIGABRT
                    cd "./$service/src/"
                    command pipenv lock "${args[@]}"
                popd >> /dev/null
            done
        }
    
    ####################
    # database-connect #
    ####################
        
        function database-connect {
            local image='mariadb'
            
            command podman run -it --rm "$image" mariadb --host host.containers.internal -P3306 --user movie_manager_user -ppass1234 --database MovieManager
        }
    
    ###################
    # fix-permissions #
    ###################
        
        function fix-permissions {
            local args=("$@")
            
            local services=('app' 'api')
            
            for service in "${services[@]}"; do
                pushd . >> /dev/null
                    trap 'popd > /dev/null' SIGINT SIGABRT
                    cd "./$service/"
                    sudo chown -R $(whoami):$(whoami) src
                    sudo chmod -R 755 src
                    sudo chcon -Rt svirt_sandbox_file_t src
                popd >> /dev/null
            done
        }
    
    ########
    # tofu #
    ########
    #
    # TODO: Wrap commands for `plan`ning and `deploy`ing
    #       infrustructure with a valid environment arg
    #       instead of wrapping the whole binary like this
    #
        
        function tofu {
            local args=("$@")
            
            local tofu; tofu=$(which tofu); [[ "$?" -eq 0 ]] || return 1
            
            pushd . >> /dev/null
                trap 'popd > /dev/null' SIGINT SIGABRT
                cd ./iac/src/
                command "$tofu" "${args[@]}"
            popd >> /dev/null
        }
        alias opentofu='tofu'
    
    ########
    # edit #
    ########
        
        function edit {
            local args=("$@")
            
            if [[ "${args[0]}" = 'Taskfile' ]]; then
                editor .
            else
                editor "${args[0]}"
            fi
            
            return "$?"
        }
    
    # List of all defined functions up until now, including the helper_functions.
    # helper_functions aren't task_functions. Filter them out from the task_functions
    task_functions=($(compgen -A function | grep -v "$helper_functions"))
    task_aliases=($(compgen -a)) # TODO: Use ${BASH_ALIASES[@]}? Is there something like a ${BASH_FUNCTIONS[@]}? Which of these would be safer to rely on?
    runnable_task_functions_and_aliases=("${task_functions[@]}" "${task_aliases[@]}")
    
########
# Main #
########
    
    taskfile-main "$@"
